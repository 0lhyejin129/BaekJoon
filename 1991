#include <stdio.h>
#include <stdlib.h>

typedef struct node* NodePtr;
typedef struct node {
	char value;
	NodePtr leftChild;
	NodePtr rightChild;
} Node;

Node* MakeNode(char c) { //새로운 노드를 생성함
	NodePtr ptr = (Node*)malloc(sizeof(Node));
	ptr->value = c;
	ptr->leftChild = NULL;
	ptr->rightChild = NULL;
	return ptr;
}

Node* ConnectNode(NodePtr ptr, char c) { //노드를 연결함
	if (ptr) {
		if (ptr->value == c) //ptr의 value와 c값이 같으면
			return ptr; //ptr에 이어서 입력
		else { //ptr의 value와 c값이 다르면
			NodePtr tmp = ConnectNode(ptr->leftChild, c); //tmp에 ptr의 leftChild를 연결함
			if (tmp) { //tmp와 ptr이 같으면
				return tmp; //tmp에 이어서 입력
			} //tmp와 ptr이 다르면
			return ConnectNode(ptr->rightChild, c); //ptr의 오른쪽에 입력
		}
	}
  return NULL;
}

void insertNode(NodePtr ptr, char a, char b, char c) { //값을 입력받아 노드를 생성함
	ptr->value = a; //ptr의 value에 a 저장
	if (b != '.') //b가 .이 아니면
		ptr->leftChild = MakeNode(b); //ptr의 leftChild에 새로운 노드 생성
	if (c != '.') //c가 .이 아니면
		ptr->rightChild = MakeNode(c); //ptr의 right에 새로운 노드 생성
}

void preorder(NodePtr ptr) {
	if (ptr) {
		printf("%c", ptr->value); //ROOT
		preorder(ptr->leftChild); //LEFT
		preorder(ptr->rightChild); //RIGHT
	}
	return;
}

void inorder(NodePtr ptr) {
	if (ptr) {
		inorder(ptr->leftChild); //LEFT
		printf("%c", ptr->value); //ROOT
		inorder(ptr->rightChild); //RIGHT
	}
	return;
}

void postorder(NodePtr ptr) {
	if (ptr) {
		postorder(ptr->leftChild); //LEFT
		postorder(ptr->rightChild); //RIGHT
		printf("%c", ptr->value); //ROOT
	}
	return;
}

int main(void) {
	NodePtr node = MakeNode((char)NULL); //새로운 노드를 생성함, NULL값을 char로 cast
	NodePtr tmp;
	int n;
	char a, b, c;

	scanf("%d", &n); //노드의 개수 입력받기
	for (int i = 1; i <= n; i++) { //node
		scanf(" %c %c %c", &a, &b, &c); //부모 노드, LeftChild 노드, RightChild 노드 입력받기
		tmp = ConnectNode(node, a); //tmp로 생성된 부모 노드 있는지 확인
		if (tmp) //생성된 부모 노드가 있으면 tmp에 이어서 생성
			insertNode(tmp, a, b, c);
		else //생성된 부모 노드가 없으면 새롭게 생성
			insertNode(node, a, b, c);
	}

	preorder(node);
	printf("\n");
	inorder(node);
	printf("\n");
	postorder(node);

	return 0;
}
